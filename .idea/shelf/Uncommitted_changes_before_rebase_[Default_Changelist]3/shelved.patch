Index: src/main/java/com/core/backend/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.core.backend.service;\n\nimport com.core.backend.entity.User;\nimport com.core.backend.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class UserService implements ServiceInterface<User>{\n\n    @Autowired\n    private UserRepository repository;\n\n    @Override\n    public void save(User user)\n    {\n        try\n        {\n            if (isValidUser(user))\n            {\n                Integer id = user.getId();\n                if (id != null)\n                {\n                    if (repository.existsById(id))\n                    {\n                        // FIXME Fazer validação de usuário já existe\n                    }\n                }\n                repository.save(user);\n            }\n        }\n        catch (Exception e)\n        {\n            System.out.println(\"erro ao salvar usuário \" + e);\n        }\n    }\n\n    @Override\n    public Page<User> getAll(Pageable pageable)\n    {\n        return repository.findAll(pageable);\n    }\n\n    @Override\n    public Optional<User> get(Integer id)\n    {\n        return repository.findById(id);\n    }\n\n    private boolean isValidUser(User user) {\n        return user != null && user.getLogin() != null && user.getPassword() != null;\n    }\n\n    public Integer validateLogin(String login, String password)\n    {\n        return repository.validate(login, password);\n    }\n\n    public User getUserByLogin(String login)\n    {\n        return repository.findByLogin(login);\n    }\n\n    public List<User> getAll()\n    {\n        return repository.findAll();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/core/backend/service/UserService.java b/src/main/java/com/core/backend/service/UserService.java
--- a/src/main/java/com/core/backend/service/UserService.java	
+++ b/src/main/java/com/core/backend/service/UserService.java	
@@ -41,13 +41,13 @@
     }
 
     @Override
-    public Page<User> getAll(Pageable pageable)
+    public Page<User> findAll(Pageable pageable)
     {
         return repository.findAll(pageable);
     }
 
     @Override
-    public Optional<User> get(Integer id)
+    public Optional<User> getById(Integer id)
     {
         return repository.findById(id);
     }
Index: src/main/java/com/core/backend/service/PaymentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.core.backend.service;\n\nimport com.core.backend.entity.Payment;\nimport com.core.backend.repository.PaymentRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class PaymentService implements ServiceInterface<Payment>{\n\n    @Autowired\n    private PaymentRepository repository;\n\n    @Override\n    public void save(Payment payment)\n    {\n        repository.save(payment);\n    }\n\n    @Override\n    public Page<Payment> getAll(Pageable pageable)\n    {\n        return repository.findAll(pageable);\n    }\n\n    @Override\n    public Optional<Payment> get(Integer id)\n    {\n        return repository.findById(id);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/core/backend/service/PaymentService.java b/src/main/java/com/core/backend/service/PaymentService.java
--- a/src/main/java/com/core/backend/service/PaymentService.java	
+++ b/src/main/java/com/core/backend/service/PaymentService.java	
@@ -23,13 +23,13 @@
     }
 
     @Override
-    public Page<Payment> getAll(Pageable pageable)
+    public Page<Payment> findAll(Pageable pageable)
     {
         return repository.findAll(pageable);
     }
 
     @Override
-    public Optional<Payment> get(Integer id)
+    public Optional<Payment> getById(Integer id)
     {
         return repository.findById(id);
     }
Index: src/main/java/com/core/backend/service/SaleService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.core.backend.service;\n\nimport com.core.backend.entity.Product;\nimport com.core.backend.entity.Sale;\nimport com.core.backend.repository.SaleRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class SaleService implements ServiceInterface<Sale> {\n\n    @Autowired\n    private SaleRepository repository;\n\n    @Override\n    public void save(Sale sale)\n    {\n        List<Product> products = sale.getProducts();\n        Float finalValue = sale.getTotalValue() != null ? sale.getTotalValue() : 0;\n        for (Product product: products)\n        {\n            Integer qtde = product.getQtde();\n            if (qtde > 0)\n            {\n                product.setQtde(qtde);\n                finalValue = finalValue + product.getFinalValue();\n            }\n            else\n            {\n                System.err.println(\"Produto não está disponível\");\n            }\n        }\n        if (finalValue != sale.getTotalValue())\n        {\n            sale.setTotalValue(finalValue);\n        }\n        repository.save(sale);\n    }\n\n    @Override\n    public Page<Sale> getAll(Pageable pageable)\n    {\n        return repository.findAll(pageable);\n    }\n\n    @Override\n    public Optional<Sale> get(Integer id)\n    {\n        return repository.findById(id);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/core/backend/service/SaleService.java b/src/main/java/com/core/backend/service/SaleService.java
--- a/src/main/java/com/core/backend/service/SaleService.java	
+++ b/src/main/java/com/core/backend/service/SaleService.java	
@@ -43,13 +43,13 @@
     }
 
     @Override
-    public Page<Sale> getAll(Pageable pageable)
+    public Page<Sale> findAll(Pageable pageable)
     {
         return repository.findAll(pageable);
     }
 
     @Override
-    public Optional<Sale> get(Integer id)
+    public Optional<Sale> getById(Integer id)
     {
         return repository.findById(id);
     }
Index: src/main/java/com/core/backend/controller/CustomerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.core.backend.controller;\n\n\nimport com.core.backend.entity.Customer;\nimport com.core.backend.service.CustomerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/customer\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService service;\n\n    //FIXME: FIND ALL WITH PAGEABLE\n    @RequestMapping(method = RequestMethod.GET)\n    public ResponseEntity<Page<Customer>> findAll(@PageableDefault(page = 0, size = Integer.MAX_VALUE, sort = \"id\", direction = Sort.Direction.ASC) Pageable pageable) {\n        Page<Customer> customers = service.getAll(pageable);\n\n//        if (customers == null || customers.isEmpty()) {\n//            return ResponseEntity.notFound().build();\n//        }\n\n        return new ResponseEntity<Page<Customer>>(customers, HttpStatus.OK);\n    }\n\n//    @RequestMapping(method = RequestMethod.GET)\n//    public ResponseEntity<List<User>> findAll() {\n//        List<User> users = service.findAll();\n//\n//        if (users == null || users.isEmpty()) {\n//            return ResponseEntity.notFound().build();\n//        }\n//\n//        return ResponseEntity.ok(users);\n//    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\n    public ResponseEntity<Optional<Customer>> findById(@PathVariable Integer id) {\n        Optional<Customer> customer = service.get(id);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        return ResponseEntity.ok(customer);\n    }\n\n    @RequestMapping(value = \"/save\", method = RequestMethod.POST)\n    public ResponseEntity<Void> save(@RequestBody Customer customer) {\n        service.save(customer);\n        URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path(\"/{id}\")\n                .buildAndExpand(customer.getId()).toUri();\n        return ResponseEntity.created(uri).build();\n\n\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\n    public ResponseEntity<Void> update(@RequestBody Customer customer, @PathVariable Integer id) {\n        if (service.get(id) == null) {\n            // user not found\n            return ResponseEntity.notFound().build();\n        }\n        service.save(customer);\n        return ResponseEntity.noContent().build();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/core/backend/controller/CustomerController.java b/src/main/java/com/core/backend/controller/CustomerController.java
--- a/src/main/java/com/core/backend/controller/CustomerController.java	
+++ b/src/main/java/com/core/backend/controller/CustomerController.java	
@@ -26,7 +26,7 @@
     //FIXME: FIND ALL WITH PAGEABLE
     @RequestMapping(method = RequestMethod.GET)
     public ResponseEntity<Page<Customer>> findAll(@PageableDefault(page = 0, size = Integer.MAX_VALUE, sort = "id", direction = Sort.Direction.ASC) Pageable pageable) {
-        Page<Customer> customers = service.getAll(pageable);
+        Page<Customer> customers = service.findAll(pageable);
 
 //        if (customers == null || customers.isEmpty()) {
 //            return ResponseEntity.notFound().build();
@@ -48,7 +48,7 @@
 
     @RequestMapping(value = "/{id}", method = RequestMethod.GET)
     public ResponseEntity<Optional<Customer>> findById(@PathVariable Integer id) {
-        Optional<Customer> customer = service.get(id);
+        Optional<Customer> customer = service.getById(id);
         if (customer == null) {
             return ResponseEntity.notFound().build();
         }
@@ -67,7 +67,7 @@
 
     @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
     public ResponseEntity<Void> update(@RequestBody Customer customer, @PathVariable Integer id) {
-        if (service.get(id) == null) {
+        if (service.getById(id) == null) {
             // user not found
             return ResponseEntity.notFound().build();
         }
Index: src/main/java/com/core/backend/service/ProductService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.core.backend.service;\n\nimport com.core.backend.entity.Category;\nimport com.core.backend.entity.Product;\nimport com.core.backend.entity.Provider;\nimport com.core.backend.repository.ProductRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class ProductService implements ServiceInterface<Product>{\n\n    @Autowired\n    private ProductRepository productRepository;\n\n    @Autowired\n    private CategoryService categoryService;\n\n    @Autowired\n    private ProviderService providerService;\n\n    @Override\n    public void save(Product product)\n    {\n        List<Category> categories = product.getCategories();\n        List<Category> newCategories = new ArrayList<>();\n        if (categories != null && !categories.isEmpty())\n        {\n            for (int i = 0; i < categories.size(); i++)\n            {\n                Optional<Category> category = categoryService.get(categories.get(i).getId());\n                Category oCategory = category.get();\n                if (oCategory != null)\n                {\n                    newCategories.add(oCategory);\n                }\n            }\n        }\n        product.setCategories(newCategories);\n        Provider provider = product.getProvider();\n        if (provider == null || provider.getId() == null)\n        {\n            product.setProvider(null);\n        }\n        else\n        {\n            product.setProvider(providerService.get(provider.getId()).get());\n        }\n        if (product != null) {\n            try\n            {\n                productRepository.save(product);\n            }\n            catch (Exception e)\n            {\n                System.err.println(\"erro ao salvar novo produto!\");\n            }\n        }\n    }\n\n    @Override\n    public Optional<Product> get(Integer id)\n    {\n        return productRepository.findById(id);\n    }\n\n    public Optional<Product> findByCode(String code)\n    {\n        return productRepository.findByCode(code);\n    }\n\n    @Override\n    public Page<Product> getAll(Pageable pageable)\n    {\n        return productRepository.findAll(pageable);\n    }\n\n    public List<Product> getAll()\n    {\n        return productRepository.findAll();\n    }\n\n    public Optional<List<Product>> getAllFromCategory(Integer categoryId){\n        Category category = categoryService.get(categoryId).get();\n        if (category != null){\n            List<Category> categoryList = new ArrayList<>();\n            categoryList.add(category);\n            return productRepository.findProductsByCategoriesIn(categoryList);\n        }\n        return null;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/core/backend/service/ProductService.java b/src/main/java/com/core/backend/service/ProductService.java
--- a/src/main/java/com/core/backend/service/ProductService.java	
+++ b/src/main/java/com/core/backend/service/ProductService.java	
@@ -34,7 +34,7 @@
         {
             for (int i = 0; i < categories.size(); i++)
             {
-                Optional<Category> category = categoryService.get(categories.get(i).getId());
+                Optional<Category> category = categoryService.getById(categories.get(i).getId());
                 Category oCategory = category.get();
                 if (oCategory != null)
                 {
@@ -50,7 +50,7 @@
         }
         else
         {
-            product.setProvider(providerService.get(provider.getId()).get());
+            product.setProvider(providerService.getById(provider.getId()).get());
         }
         if (product != null) {
             try
@@ -65,7 +65,7 @@
     }
 
     @Override
-    public Optional<Product> get(Integer id)
+    public Optional<Product> getById(Integer id)
     {
         return productRepository.findById(id);
     }
@@ -76,7 +76,7 @@
     }
 
     @Override
-    public Page<Product> getAll(Pageable pageable)
+    public Page<Product> findAll(Pageable pageable)
     {
         return productRepository.findAll(pageable);
     }
@@ -87,7 +87,7 @@
     }
 
     public Optional<List<Product>> getAllFromCategory(Integer categoryId){
-        Category category = categoryService.get(categoryId).get();
+        Category category = categoryService.getById(categoryId).get();
         if (category != null){
             List<Category> categoryList = new ArrayList<>();
             categoryList.add(category);
Index: src/main/java/com/core/backend/controller/ProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.core.backend.controller;\n\nimport com.core.backend.entity.Product;\nimport com.core.backend.service.ProductService;\nimport com.core.simulation.ProductTest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(value = \"/product\")\npublic class ProductController {\n\n    @Autowired\n    private ProductService service;\n\n    @RequestMapping(value = \"/save\", method = RequestMethod.POST)\n    public void save(@RequestBody Product product) {\n        service.save(product);\n    }\n\n    @RequestMapping(value = \"/test\", method = RequestMethod.GET)\n    public void save() {\n        new ProductTest().testAll();\n    }\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ResponseEntity<Page<Product>> findAll(@PageableDefault(page = 0, size = Integer.MAX_VALUE, sort = \"id\", direction = Sort.Direction.ASC) Pageable pageable)\n    {\n        Page<Product> products = service.getAll(pageable);\n        if (products == null || products.isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n\n        return new ResponseEntity<Page<Product>>(products, HttpStatus.OK);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\n    public Optional<Product> getProduct(@PathVariable Integer id) {\n        return service.get(id);\n    }\n\n    @RequestMapping(value = \"/code/{code}\", method = RequestMethod.GET)\n    public Optional<Product> getProductByCode(@PathVariable String code) {\n        return service.findByCode(code);\n    }\n\n    @RequestMapping(value = \"/category/{id}\", method = RequestMethod.GET)\n    public  ResponseEntity<List<Product>> getAllFromCategory(@PathVariable String id) {\n        Integer categoryId = Integer.parseInt(id);\n        Optional<List<Product>> products = service.getAllFromCategory(categoryId);\n        if (!products.isPresent())\n        {\n            return ResponseEntity.noContent().build();\n        }\n        return new ResponseEntity<List<Product>>(products.get(), HttpStatus.OK);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/core/backend/controller/ProductController.java b/src/main/java/com/core/backend/controller/ProductController.java
--- a/src/main/java/com/core/backend/controller/ProductController.java	
+++ b/src/main/java/com/core/backend/controller/ProductController.java	
@@ -35,7 +35,7 @@
     @RequestMapping(method = RequestMethod.GET)
     public ResponseEntity<Page<Product>> findAll(@PageableDefault(page = 0, size = Integer.MAX_VALUE, sort = "id", direction = Sort.Direction.ASC) Pageable pageable)
     {
-        Page<Product> products = service.getAll(pageable);
+        Page<Product> products = service.findAll(pageable);
         if (products == null || products.isEmpty()) {
             return ResponseEntity.notFound().build();
         }
@@ -45,7 +45,7 @@
 
     @RequestMapping(value = "/{id}", method = RequestMethod.GET)
     public Optional<Product> getProduct(@PathVariable Integer id) {
-        return service.get(id);
+        return service.getById(id);
     }
 
     @RequestMapping(value = "/code/{code}", method = RequestMethod.GET)
Index: src/main/java/com/core/backend/service/ServiceInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.core.backend.service;\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface ServiceInterface<T> {\n    public Page<T> getAll(Pageable pageable);\n    public Optional<T> get(Integer id);\n    public void save(T object);\n\n}\n
===================================================================
diff --git a/src/main/java/com/core/backend/service/ServiceInterface.java b/src/main/java/com/core/backend/service/ServiceInterface.java
--- a/src/main/java/com/core/backend/service/ServiceInterface.java	
+++ b/src/main/java/com/core/backend/service/ServiceInterface.java	
@@ -6,8 +6,8 @@
 import java.util.Optional;
 
 public interface ServiceInterface<T> {
-    public Page<T> getAll(Pageable pageable);
-    public Optional<T> get(Integer id);
+    public Page<T> findAll(Pageable pageable);
+    public Optional<T> getById(Integer id);
     public void save(T object);
 
 }
Index: src/main/java/com/core/backend/service/CustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.core.backend.service;\n\nimport com.core.backend.entity.Customer;\nimport com.core.backend.repository.CustomerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class CustomerService implements ServiceInterface<Customer>{\n\n    @Autowired\n    private CustomerRepository repository;\n\n    @Override\n    public void save(Customer customer)\n    {\n        repository.save(customer);\n    }\n\n    @Override\n    public Page<Customer> getAll(Pageable pageable)\n    {\n        return repository.findAll(pageable);\n    }\n\n    @Override\n    public Optional<Customer> get(Integer id)\n    {\n        return repository.findById(id);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/core/backend/service/CustomerService.java b/src/main/java/com/core/backend/service/CustomerService.java
--- a/src/main/java/com/core/backend/service/CustomerService.java	
+++ b/src/main/java/com/core/backend/service/CustomerService.java	
@@ -23,13 +23,13 @@
     }
 
     @Override
-    public Page<Customer> getAll(Pageable pageable)
+    public Page<Customer> findAll(Pageable pageable)
     {
         return repository.findAll(pageable);
     }
 
     @Override
-    public Optional<Customer> get(Integer id)
+    public Optional<Customer> getById(Integer id)
     {
         return repository.findById(id);
     }
